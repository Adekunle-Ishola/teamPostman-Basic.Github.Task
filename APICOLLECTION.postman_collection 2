{
	"info": {
		"_postman_id": "72d8d166-d804-4afb-b48e-da416f6325d3",
		"name": "APICOLLECTION",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25900945"
	},
	"item": [
		{
			"name": "TESTAPI",
			"item": [
				{
					"name": "New Request 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name should be OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://petstore.swagger.io/v2/swagger.json",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"swagger.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET BOOKS",
			"item": [
				{
					"name": "Get All Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"console.log(jsonData)\r",
									"\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"/**\r",
									" * pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");\r",
									"});\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.value).to.eql(100);\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"response_body_string\");\r",
									"});\r",
									" * \r",
									" * \r",
									" * \r",
									" */\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlBook}}/books",
							"host": [
								"{{baseUrlBook}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books - valid book",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlBook}}/books",
							"host": [
								"{{baseUrlBook}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books - Invalid books",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlBook}}/books?type=romance",
							"host": [
								"{{baseUrlBook}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "romance"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PLACE A BOOK ORDER",
			"item": [
				{
					"name": "Place a Book Order - using valid book type",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrlBook}}/orders",
							"host": [
								"{{baseUrlBook}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place a Book Order - using invalid book type",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrlBook}}/orders",
							"host": [
								"{{baseUrlBook}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place a Book Order - using no book type",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrlBook}}/orders",
							"host": [
								"{{baseUrlBook}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get an Order",
			"item": [
				{
					"name": "Get An Order - using valid book type",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlBook}}/orders/:orderId",
							"host": [
								"{{baseUrlBook}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get An Order - using invalid book type",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlBook}}/orders/:orderId",
							"host": [
								"{{baseUrlBook}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get An Order - using no valid book type",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlBook}}/orders/:orderId",
							"host": [
								"{{baseUrlBook}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete An Order",
			"item": [
				{
					"name": "Delete An Order - using valid book type",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrlBook}}/orders/:orderId",
							"host": [
								"{{baseUrlBook}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete An Order - using invalid book type",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrlBook}}/orders/:orderId",
							"host": [
								"{{baseUrlBook}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete An Order - using no book type",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrlBook}}/orders/:orderId",
							"host": [
								"{{baseUrlBook}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET ALL TO DO ENTRIES",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData.info.version)\r",
							"\r",
							"console.log(jsonData.swagger)\r",
							"\r",
							"pm.environment.set(\"entityVersion\", jsonData.info.version);\r",
							"\r",
							"pm.environment.set(\"entitySwagger\", jsonData.swagger);\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code name should have an OK string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData)\r",
							"\r",
							"console.log(jsonData.swagger)\r",
							"\r",
							"console.log(jsonData.host)\r",
							"console.log(jsonData.tags)\r",
							"console.log(jsonData.info.version)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"confirm that Everything about your Pets is present\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.tags[0].description).is.eql(\"Everything about your Pets\");\r",
							"});\r",
							"\r",
							"pm.test(\"confirm that the version is 1.0.6\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.info.version).is.eql(\"1.0.6\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"confirm that the swagger is 2.0\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.swagger).to.eql(\"2.0\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"2.0\");\r",
							"\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"/**\r",
							" * pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"response_body_string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");\r",
							"});\r",
							" * \r",
							" */\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"strictSSL": true,
				"followOriginalHttpMethod": true,
				"followAuthorizationHeader": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "list",
						"value": "hard cover non fiction",
						"type": "text"
					},
					{
						"key": "rank",
						"value": "{{entityVersion}}",
						"type": "text"
					},
					{
						"key": "Swagger",
						"value": "{{entitySwagger}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/v2/swagger.json",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v2",
						"swagger.json"
					]
				}
			},
			"response": []
		}
	]
}